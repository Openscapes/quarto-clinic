---
title: Part 1: Edit a Quarto site
---

We will work through this Quarto Clinic site in the NASA Openscapes 2i2c JupyterHub ("the Hub"). The Hub has a python environment as well as Quarto installed. No further installations are required.

## Setup

TODO: Don't call this "Setup"; too vague. Decide if this file is just "demo 1" or all the content of Part 1 - demo and practice for: clone, branch, preview, make changes, add ipynb, edit \_quarto.yml, preview, END

### Log in to the Hub

Go to the Hub https://openscapes.2i2c.cloud \> log in with your GitHub Account \> select the Python server.

[![Login page for the NASA Openscapes 2i2c JupyterHub, "the Hub"](images/jupyterhub-2i2c-login.png)](https://openscapes.2i2c.cloud/)

![Hub server options](images/jupyterhub-server-options.png)

![](images/jupyterhub-loading.png)

It takes a few minutes for the Hub to load. Please be patient!

While the server starts up, weâ€™ll explore the GitHub Clinic repo structure side by side with the website (go back to the [Explore](../explore.qmd) section).

### Clone the Quarto Clinic repo

You'll start by cloning your repository into the Hub.

**Option A:** Use the Git tab to Clone repo

![Clone a GitHub repository in the Hub](images/jupyterhyb-clone-repo.png)

**Option B:** Do this by opening a terminal (File \> New \> Terminal). In the Terminal, `git clone` your repository and `cd` into it:

``` bash
git clone https://github.com/openscapes/quarto-clinic
cd quarto-clinic
```

### Make a branch

Working in a branch means you have your own version of the Quarto Clinic to edit and preview. Later, you might propose contributing your edits to the Main branch of the Clinic by making a "Pull Request".

branch name = your name

TODO screenshot and cmd line

## Preview the site (aka Quarto preview)

Let's start off by previewing our quarto site locally.

quarto render does X

quarto preview does Y

In Terminal, type `quarto preview`, which will provide a URL with a preview of our site!

``` bash
quarto preview
# Preparing to preview
# Watching files for changes
# Browse at https://openscapes.2i2c.cloud/user/jules32/proxy/4593/
```

Copy this URL into another browser window; and arrange them so you can see them both. I make a bit more space in Jupyter by collapsing the left file menu by clicking on the file icon at the top of the left sidebar.

TODO: add new screenshots

![](images/jupyter-side-by-side.png){fig-align="center"}

Now that we have each set up our own GitHub clone of this Quarto Clinic website in the Openscapes 2i2c JupyterHub, we can practice editing and rendering `.qmd` and `ipynb` files. These are the workflows we use to contribute to the NASA Earthdata Cloud Cookbook and other Quarto websites and books.

## Choose Task 1a or 1b (Activity)

TODO: fill out Task 1a

TODO: edit demo.md file to have only what we need

### Task 1a: Edit and preview a demo.qmd file

1.  Edit a .qmd page (uses demo.qmd file that has markdown for text, add hyperlink, add image, run Python code)

    1.  Headers

    ```         
    1.  Headers are powerful in Quarto because they let you organize on the side of the page. They let you share a specific section of a page by copying the URL
    ```

    2.  hyperlink something (cite the Cookbook and hyperlink it)

        1.  Hyperlinking is done like this; lets you cite and give credit

    3.  inspect this image with alt-txt

    4.  Python code

        1.  manage echo, run

TODO: screenshot

TODO: edit the text below re: "make a small change"; fix a typo

#### Make a small change and preview it

Now we'll be able to see live changes in the preview as we edit in our `.qmd` files. Let's try it: Change the date in `index.qmd` by opening it from the file directory. Change to today's date, and save. Your preview window will refresh automatically! If it does not, you can also refresh the page manually. The refreshed previewed site will now display your changes!

### Task 1b: Create a new `.ipynb` page

Let's add a new page to our site. Instead of a `.qmd` file like the others, let's add a `.ipynb` file.

File \> New \> Notebook. Accept the default kernel by clicking Select.

TODO: screenshot

#### First chunk: raw yaml

By default, this Notebook will give us a first chunk that is code. Let's change it to raw so that we can write our yaml at the top.

![](images/jupyter-raw-chunk.png){fig-align="center"}

In our Raw code chunk, let's write the title of this document. We need three dashes `---` on separate lines preceding and following the `title:`, which you can name as you'd like.

``` bash
---
title: Python Example
---
```

#### Second chunk: Markdown

Let's add a new chunk that is Markdown so we can write some description of what this page will be.

Click the `+` symbol at the top of the document, and this will add a new chunk, which by default again is a Code chunk. Change it to a Markdown Chunk following the steps we did above when switching to Raw.

Here, write a little bit of text in Markdown. Since your title is effectively a level-1 header, avoid using level-1 headers in the rest of your document. Here is some example text I wrote:

``` bash
## Introduction

This example has some Python code that will be a part of our Quarto site.
```

#### Third chunk: Code

Now let's create a new chunk with the default Code setting.

Paste the following code (or write some of your own to test):

``` python
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"
import numpy as np
import matplotlib.pyplot as plt
r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

Now, go ahead and execute this code chunk like you normally would, by clicking the cursor in a code block and clicking the sideways "play" triangle to run the selected cells (and advance to the next cell). This code produces a plot.

Note that the code runs as it normally would; the code options in the comments are just comments.

#### Save your file

Save your document - I'll call mine `python-example.ipynb` in the main repository.

## Preview your updates (Regroup, 10 min)

**Demo**: If you created a new page, how do you get it in the book? Involves editing \_quarto.yml to have it show up in site

### Update `_quarto.yml`

Now we'll add `python-example.ipynb` to our `_quarto.yml` file; this is where we register of all files to include in our site. Let's add it after the section called "Basic Workflows".

Open `_quarto.yml` by clicking on it from the file directory.

Scroll down to review the current contents in the `sidebar:` section. It's there we see all the file arrangement that we see in the previewed site.

TODO: update screenshots and dont' use line \#

Add `- python-example.ipynb` to line 46, making sure that your indentation aligns with the other pages.

![](images/jupyter-python-example.png){fig-align="center"}

You'll see that our new page shows up in our Preview, and the code is executed since we did that in the Jupyter Notebook itself. By default, Quarto will not execute code chunks since your computations will likely become more complex and you will want to control when they are executed (or "run").

Since Quarto is still previewing our website and the `python-example.ipynb`, the plot also displays in the notebook after the code is run and the file is saved, as shown below.

![](images/jupyter-execute-cell.png){fig-align="center"}

So, your normal workflow for creating and running code blocks in your Jupyter Notebook is the same one you'll use as Quarto displays the preview.

### Quarto render

TODO: clarify preview vs render text

So far we have used **Quarto preview** to view our website as we develop it. **Quarto render** will build the html elements of the website that we can see when we preview. Rendering will format the markdown text and code nicely as a website (or however is indicated in the `_quarto.yml`).

By default, Quarto render does not execute code in a Jupyter notebook. It will never run .ipynb files unless you tell it to.

### Render whole notebook

If you would like it to specifically execute code in a Jupyter notebook, you can do so in Terminal.

Our Terminal is still busy previewing our website, so let's open a new Terminal.

File \> New \> Terminal. Then type:

``` bash
cd quarto-website-tutorial
quarto render python-example.ipynb --execute
```

*TODO: move the below sections elsewhere. Here commit and push, then move to Part 2: Share via GitHub. I think the transition/ section break is when moving from JupyterHub to GitHub*

## Commit and push to GitHub

Committing and pushing will make the changes you see locally live on your website (using the [GitHub Action we set up earlier](/explore.qmd#setup-github-action)).
